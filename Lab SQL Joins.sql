-- Write SQL queries to perform the following tasks using the Sakila database:
-- List the number of films per category.
select sakila.category.name, count(distinct sakila.film.film_id) as film_number
from sakila.category
left join sakila.film_category
	on sakila.category.category_id = sakila.film_category.category_id
left join sakila.film
	on sakila.film_category.film_id = sakila.film.film_id
group by sakila.category.name
;

-- Retrieve the store ID, city, and country for each store.
select store_id, sakila.city.city, sakila.country.country
from sakila.store
left join sakila.address
	on sakila.store.address_id = sakila.address.address_id
left join sakila.city
	on sakila.address.city_id = sakila.city.city_id
left join sakila.country
	on sakila.city.country_id = sakila.country.country_id
;

-- Calculate the total revenue generated by each store in dollars.
select store.store_id, sum(sakila.payment.amount) as total_revenue
from sakila.store
left join sakila.customer
	on store.store_id = customer.store_id
left join sakila.payment
	on customer.customer_id = payment.customer_id
group by store.store_id
;

-- Determine the average running time of films for each category.
select category.name, avg(film.length) as average_length
from category
left join film_category
using (category_id)
left join film
using (film_id)
group by category.name;

-- Bonus
-- Identify the film categories with the longest average running time.
select category.name, avg(film.length) as average_length
from category
left join film_category
using (category_id)
left join film
using (film_id)
group by category.name
order by average_length desc
limit 3;

-- Display the top 10 most frequently rented movies in descending order.
select film.title, count(film.title) frequency
from film
left join inventory
	using(film_id)
left join rental
	using(inventory_id)
 group by film.title
 order by frequency desc
 limit 10;
 
 -- Determine if "Academy Dinosaur" can be rented from Store 1.
 select store_id, film.title, inventory_id
 from store
 left join inventory
	using(store_id)
 left join film
	using(film_id)
where film.title = 'Academy Dinosaur' and store_id = 1
    ;
 
 -- Provide a list of all distinct film titles, along with their availability status in the inventory. 
 -- Include a column indicating whether each title is 'Available' or 'NOT available.' 
 select film.title,
 if (COUNT(inventory.inventory_id) > 0,'Available', 'Not Available') as availability_status
 from film
 left join inventory
 using(film_id)
group by film.title;
 

 -- Note that there are 42 titles that are not in the inventory, and this information 
-- can be obtained using a CASE statement combined with IFNULL."

 select film.title,
 if (COUNT(inventory.inventory_id) > 0,'Available', 'Not Available') as availability_status
 from film
 left join inventory
 using(film_id)
group by film.title
having availability_status = 'Not Available';
